spring:
  jpa:
    show-sql: true
    generate-ddl: true
    hibernate:
      ddl-auto: update
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  datasource:
    url: jdbc:postgresql://ec2-54-225-72-238.compute-1.amazonaws.com:5432/dc49p43h6fpqm0?user=otlkqbgltmiagr&password=b5bb1c5b02bf04886b5cf46d3f62e54bd35f44d6021d168ba6ba682d9c7abcb5&sslmode=require
    username: otlkqbgltmiagr
    password: b5bb1c5b02bf04886b5cf46d3f62e54bd35f44d6021d168ba6ba682d9c7abcb5
  security:
    oauth2:
      client:
        registration:
          facebook:
            clientId: 300734334203766
            clientSecret: bdbdb79adde87f96cf8ddd49f93b1305
            redirectUriTemplate: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
            - email
            - public_profile
        provider:
          facebook:
            authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
            tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
            userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)
server:
  port: 8081

app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpirationMsec: 864000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the frontend client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
    - http://localhost:3000/oauth2/redirect
    - myandroidapp://oauth2/redirect
    - myiosapp://oauth2/redirect